# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    ENV["FL_COCOAPODS_PODFILE"] ||= "Example/Podfile"
    ENV["XCODEGEN_SPEC"] ||= "Example/project.yml"
  end

  lane :setup_xcodegen do
    xcodegen
  end

  lane :setup_cocoapods do
    cocoapods
  end

  lane :setup do
    setup_xcodegen
    setup_cocoapods
  end

  lane :format do
    swiftformat
  end

  lane :lint do
    swiftlint
  end

  lane :pod_lint do |options|
    case options[:target]
    when "NBusQQSDK"
      pod_lib_lint(
        podspec: "NBusQQSDK.podspec",
        allow_warnings: true,
        verbose: true,
      )
    when "NBusWechatSDK"
      pod_lib_lint(
        podspec: "NBusWechatSDK.podspec",
        allow_warnings: true,
        verbose: true,
      )
    when "NBusWeiboSDK"
      pod_lib_lint(
        podspec: "NBusWeiboSDK.podspec",
        allow_warnings: true,
        verbose: true,
      )
    when "NBus"
      pod_lib_lint(
        podspec: "NBus.podspec",
        allow_warnings: true,
        include_podspecs: "{NBusQQSDK,NBusWechatSDK,NBusWeiboSDK}.podspec",
        verbose: true,
      )
    else
      raise("never")
    end
  end

  lane :download_all_sdk do
    download_qq_sdk
    download_wechat_sdk
    download_weibo_sdk
  end

  lane :download_qq_sdk do
    vendor = "QQ"
    vendor_version = "3.5.5"
    vendor_url = "https://tangram-1251316161.file.myqcloud.com/qqconnect/OpenSDK_V#{vendor_version}/iOS_V#{vendor_version}-Lite.zip"
    vendor_sha256 = "94e88a9898728231b34fa01879c39b5e6bb3e116b9c9015d330f385cb03f15da"
    vendor_search = "."

    download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  end

  lane :download_wechat_sdk do
    vendor = "Wechat"
    vendor_version = "1.9.2"
    vendor_url = "https://res.wx.qq.com/op_res/XP2S6Df6fFmoNCdbbD14fbkHfjxvl3Q4lw61HkI79tjBQjppRTgJSmJ1cYKIXZdQh9IeX2xXCWX7AqnzuWfUvw"
    vendor_sha256 = "a0c264034d96889c45691dfac8cc5dcc2fab170f9ac3f26864905142e92d42ff"
    vendor_search = "."

    download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  end

  lane :download_weibo_sdk do
    vendor = "Weibo"
    vendor_version = "3.3.1"
    vendor_commit = "c25727f89523d3785a59ddaf2cfc15606df9b391" # no tag, use master branch
    vendor_url = "https://github.com/sinaweibosdk/weibo_ios_sdk/archive/#{vendor_commit}.zip"
    vendor_sha256 = "df5ed2200b1bdbe3b2bb1a7ba3e2f460e8c0d774c0a96b307782521bcd2d7f5f"
    vendor_search = "weibo_ios_sdk-#{vendor_commit}/libWeiboSDK"

    download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  end

  lane :upload_all_sdk do
    upload_qq_sdk
    upload_wechat_sdk
    upload_weibo_sdk
  end

  lane :upload_qq_sdk do
    vendor = "QQ"
    vendor_version = "3.5.5"
    vendor_package = "nbusqqsdk"

    upload_sdk(vendor, vendor_version, vendor_package)
  end

  lane :upload_wechat_sdk do
    vendor = "Wechat"
    vendor_version = "1.9.2"
    vendor_package = "nbuswechatsdk"

    upload_sdk(vendor, vendor_version, vendor_package)
  end

  lane :upload_weibo_sdk do
    vendor = "Weibo"
    vendor_version = "3.3.1"
    vendor_package = "nbusweibosdk"

    upload_sdk(vendor, vendor_version, vendor_package)
  end
end

# download

def download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  root = (Pathname.pwd / "../NBus/Vendor").expand_path

  vendor_file = root / "Vendor_#{vendor}_#{vendor_version}.zip"
  vendor_zip_directory = root / "#{vendor}ZIP"
  vendor_sdk_directory = root / "#{vendor}SDK"

  FileUtils.mkdir_p(root)

  download_file(vendor_url, vendor_file, vendor_sha256)

  extract_file(vendor_version, vendor_file, vendor_search, vendor_zip_directory, vendor_sdk_directory)
end

def download_file(url, file, sha256)
  if file.exist? && Digest::SHA256.file(file) == sha256
    puts("file exist")
  else
    sh("wget", url, "-O", file.to_s)
    if Digest::SHA256.file(file) == sha256
      puts("download success")
    else
      raise("download failure")
    end
  end
end

def extract_file(version, file, search, zip_directory, sdk_directory)
  zip_search_directory = zip_directory / search
  sdk_version_directory = sdk_directory / version
  sdk_version_header_directory = sdk_version_directory / "Headers"
  sdk_version_resource_directory = sdk_version_directory / "Resources"
  sdk_version_source_directory = sdk_version_directory / "Sources"
  sdk_dummy_swift_file = sdk_version_source_directory / "ReplaceMe.swift"

  FileUtils.rm_rf(zip_directory)

  sh("ditto", "-x", "-k", "--sequesterRsrc", "--rsrc", file.to_s, zip_directory.to_s)

  zip_directory.glob("*.zip").each do |file|
    sh("ditto", "-x", "-k", "--sequesterRsrc", "--rsrc", file.to_s, zip_directory.to_s)
  end

  FileUtils.rm_rf(sdk_directory)
  FileUtils.mkdir_p(sdk_version_directory)

  zip_search_directory.glob("*.{bundle,framework,a,h}").each do |file|
    case file.extname
    when ".bundle"
      FileUtils.mkdir_p(sdk_version_resource_directory)
      FileUtils.cp_r(file, sdk_version_resource_directory)
    when ".framework"
      FileUtils.cp_r(file, sdk_version_directory)
    when ".a"
      FileUtils.cp_r(file, sdk_version_directory)
    when ".h"
      FileUtils.mkdir_p(sdk_version_header_directory)
      FileUtils.cp_r(file, sdk_version_header_directory)
    else
      raise("never")
    end
  end

  FileUtils.mkdir_p(sdk_version_source_directory)
  FileUtils.touch(sdk_dummy_swift_file)
end

# upload

def upload_sdk(vendor, vendor_version, vendor_package)
  root = (Pathname.pwd / "../NBus/Vendor").expand_path

  vendor_sdk_directory = root / "#{vendor}SDK"
  vendor_img_directory = root / "#{vendor}IMG"
  vendor_tar_file = vendor_img_directory / "#{vendor}SDK.tar"
  vendor_tar_gz_file = vendor_img_directory / "#{vendor}SDK.tar.gz"

  owner = "nuomi1"
  repo = "nbus"

  vendor_package_url = URI("docker://ghcr.io/#{owner}/#{repo}/#{vendor_package}:#{vendor_version}")

  make_docker_container(vendor_sdk_directory, vendor_img_directory, vendor_tar_file, vendor_tar_gz_file)

  upload_github_package(vendor_img_directory, vendor_package_url)
end

def make_docker_container(sdk_directory, img_directory, tar_file, tar_gz_file)
  FileUtils.rm_rf(img_directory)
  FileUtils.mkdir_p(img_directory)

  sh("tar", "-c", "--exclude", ".DS_Store", "-C", sdk_directory.dirname.to_s, "-f", tar_file.to_s, sdk_directory.basename.to_s)

  platform_hash = {
    architecture: "amd64",
    os: "darwin",
  }

  tar_sha256 = Digest::SHA256.file(tar_file)

  config_json_sha256, config_json_size = write_image_config(platform_hash, tar_sha256, img_directory)

  sh("gzip", "-9", tar_file.to_s)

  tar_gz_sha256 = write_tar_gz(tar_gz_file, img_directory)
  tar_gz_size = File.size(tar_gz_file)

  FileUtils.rm_rf(tar_gz_file)

  image_manifest = {
    schemaVersion: 2,
    config: {
      mediaType: "application/vnd.oci.image.config.v1+json",
      size: config_json_size,
      digest: "sha256:#{config_json_sha256}",
    },
    layers: [{
      mediaType: "application/vnd.oci.image.layer.v1.tar+gzip",
      size: tar_gz_size,
      digest: "sha256:#{tar_gz_sha256}",
    }],
  }

  write_hash(img_directory, image_manifest, "manifest.json")
end

def upload_github_package(img_directory, package_url)
  sh("skopeo", "copy", "dir:#{img_directory}", package_url.to_s)
end

# from homebrew

def write_tar_gz(local_file, blobs)
  tar_gz_sha256 = Digest::SHA256.file(local_file).hexdigest
  FileUtils.cp(local_file, blobs / tar_gz_sha256)
  tar_gz_sha256
end

def write_image_config(platform_hash, tar_sha256, blobs)
  image_config = platform_hash.merge({
    rootfs: {
      diff_ids: ["sha256:#{tar_sha256}"],
      type: "layers",
    },
  })
  write_hash(blobs, image_config)
end

def write_hash(directory, hash, filename = nil)
  json = JSON.pretty_generate(hash)
  sha256 = Digest::SHA256.hexdigest(json)
  filename ||= sha256
  path = directory / filename
  path.unlink if path.exist?
  path.write(json)

  [sha256, json.size]
end
