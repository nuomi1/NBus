# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    ENV["FL_COCOAPODS_PODFILE"] ||= "Example/Podfile"
    ENV["XCODEGEN_SPEC"] ||= "Example/project.yml"
  end

  lane :setup_xcodegen do
    xcodegen
  end

  lane :setup_cocoapods do
    cocoapods
  end

  lane :setup do
    setup_xcodegen
    setup_cocoapods
  end

  lane :format do
    swiftformat
  end

  lane :lint do
    swiftlint
  end

  lane :download_all_sdk do
    download_qq_sdk
    download_wechat_sdk
    download_weibo_sdk
  end

  lane :download_qq_sdk do
    vendor = "QQ"
    vendor_version = "3.5.3"
    vendor_url = "https://tangram-1251316161.file.myqcloud.com/qqconnect/OpenSDK_V#{vendor_version}/iOS_V#{vendor_version}_Lite.zip"
    vendor_sha256 = "6026e3dfc1fa227ef401cdaea79c524f810bf70e5e5d322f8497c8e7e91d3639"
    vendor_search = "."

    download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  end

  lane :download_wechat_sdk do
    vendor = "Wechat"
    vendor_version = "1.8.9"
    vendor_url = "https://res.wx.qq.com/op_res/_Q5kJ9eIC1z-APXT9YPj2uWc-8esYianDXmZnbU7nFSxL_YmuvcoREglWUsrwLInpC6oj7QQB7DhLiZnlcfpGg"
    vendor_sha256 = "3ab48734e97ce6c25979286b2552dc87c46da7ecc5b832348f1fda68200bd5dd"
    vendor_search = "OpenSDK#{vendor_version}"

    download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  end

  lane :download_weibo_sdk do
    vendor = "Weibo"
    vendor_version = "3.3.0"
    vendor_url = "https://github.com/sinaweibosdk/weibo_ios_sdk/archive/refs/tags/#{vendor_version}.zip"
    vendor_sha256 = "ce89b655067d5bba30c490c5f79d2a93a331eb7cfbd6bb8d0860ef444ff2778a"
    vendor_search = "weibo_ios_sdk-#{vendor_version}/libWeiboSDK"

    download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  end
end

# download

def download_sdk(vendor, vendor_version, vendor_url, vendor_sha256, vendor_search)
  root = (Pathname.pwd / "../NBus/Vendor").expand_path

  vendor_file = root / "Vendor_#{vendor}_#{vendor_version}.zip"
  vendor_zip_directory = root / "#{vendor}ZIP"
  vendor_sdk_directory = root / "#{vendor}SDK"

  FileUtils.mkdir_p(root)

  download_file(vendor_url, vendor_file, vendor_sha256)

  extract_file(vendor_version, vendor_file, vendor_search, vendor_zip_directory, vendor_sdk_directory)
end

def download_file(url, file, sha256)
  if file.exist? && Digest::SHA256.file(file) == sha256
    puts("file exist")
  else
    sh("wget", url, "-O", file.to_s)
    if Digest::SHA256.file(file) == sha256
      puts("download success")
    else
      raise("download failure")
    end
  end
end

def extract_file(version, file, search, zip_directory, sdk_directory)
  zip_search_directory = zip_directory / search
  sdk_version_directory = sdk_directory / version
  sdk_version_header_directory = sdk_version_directory / "Headers"
  sdk_version_resource_directory = sdk_version_directory / "Resources"
  sdk_version_source_directory = sdk_version_directory / "Sources"
  sdk_dummy_swift_file = sdk_version_source_directory / "ReplaceMe.swift"

  FileUtils.rm_rf(zip_directory)

  sh("ditto", "-x", "-k", "--sequesterRsrc", "--rsrc", file.to_s, zip_directory.to_s)

  zip_directory.glob("*.zip").each do |file|
    sh("ditto", "-x", "-k", "--sequesterRsrc", "--rsrc", file.to_s, zip_directory.to_s)
  end

  FileUtils.rm_rf(sdk_directory)
  FileUtils.mkdir_p(sdk_version_directory)

  zip_search_directory.glob("*.{bundle,framework,a,h}").each do |file|
    case file.extname
    when ".bundle"
      FileUtils.mkdir_p(sdk_version_resource_directory)
      FileUtils.cp_r(file, sdk_version_resource_directory)
    when ".framework"
      FileUtils.cp_r(file, sdk_version_directory)
    when ".a"
      FileUtils.cp_r(file, sdk_version_directory)
    when ".h"
      FileUtils.mkdir_p(sdk_version_header_directory)
      FileUtils.cp_r(file, sdk_version_header_directory)
    else
      raise("never")
    end
  end

  FileUtils.mkdir_p(sdk_version_source_directory)
  FileUtils.touch(sdk_dummy_swift_file)
end
